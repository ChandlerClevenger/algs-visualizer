import type { NextPage } from "next";
import Head from "next/head";
import React, { BaseSyntheticEvent, useState } from "react";
import { DraggableData } from "react-draggable";
import Router from "../componets/router";

const ROUTER_SIZE = 75;
const LINE_OFFSET = ROUTER_SIZE / 2;
interface RouterInt {
  onStop: any;
  start: any;
  onDrag: any;
  id: number;
  x: number;
  y: number;
}

const Home: NextPage = () => {
  const defaultRouter: RouterInt = {
    onStop: drop,
    start: start,
    onDrag: drag,
    id: 0,
    x: 0,
    y: 0,
  };
  const [routers, setRouters] = useState<RouterInt[]>([defaultRouter]);
  const [currentPos, setCurrentPos] = useState({ top: 0, left: 0 });
  const [lines, setLines] = useState<[RouterInt, RouterInt][]>([]);
  const [clickedRouter, setClickedRouter] = useState<any>();

  function drag(e: any, info: DraggableData): void {
    const DRAGGED_ID = Number(info.node.id);
    // Update lines
    lines.map(([el1, el2]) => {
      if ([Number(el1.id), Number(el2.id)].includes(DRAGGED_ID)) {
        const current = DRAGGED_ID == el1.id ? el1 : el2;
        current.x = info.x;
        current.y = info.y;
      }
    });
    setLines((lines) => [...lines]);
  }
  function start(e: BaseSyntheticEvent): void {
    const { top, left } = e.target.getBoundingClientRect();
    setCurrentPos({ top, left });
  }

  function drop(e: BaseSyntheticEvent, info: DraggableData): void {
    const { top, left } = e.target.getBoundingClientRect();
    // Must move at least 100 px out
    if (info.x < 100 && info.y < 100) return;

    // Detect click
    if (currentPos.left == left && currentPos.top == top) {
      handleClick(e, info);
      return;
    }

    const DRAGGED_ID = Number(info.node.id);
    for (const router of routers) {
      if (router.id == DRAGGED_ID) {
        // update position of old
        router.x = info.x;
        router.y = info.y;
      }
    }

    if (DRAGGED_ID == routers.length - 1) {
      setRouters((oldRouters) => [
        ...oldRouters,
        {
          start: start,
          onStop: drop,
          onDrag: drag,
          id: routers.length,
          x: 0,
          y: 0,
        },
      ]);
    }
    //console.log(routers);
  }

  function handleClick(e: BaseSyntheticEvent, info: DraggableData): void {
    if (!clickedRouter || clickedRouter.id == e.target.id) {
      setClickedRouter({
        start: start,
        onstop: drop,
        onDrag: drag,
        id: e.target.id,
        x: info.x,
        y: info.y,
      });
      return;
    }
    const secondRouter = {
      start: start,
      onStop: drop,
      onDrag: drag,
      id: e.target.id,
      x: info.x,
      y: info.y,
    };
    const [smaller, larger] = [clickedRouter, secondRouter].sort((a, b) =>
      a.id > b.id ? 1 : -1
    );

    // Check for dupe connections
    for (const [r1, r2] of lines) {
      if (r1.id == smaller.id && r2.id == larger.id) {
        return;
      }
    }

    setLines((oldLines) => [...oldLines, [smaller, larger]]);
    setClickedRouter(null);
    console.log("lines: ", lines);
  }

  return (
    <>
      <Head>
        <title>Ball State - CS Team</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex h-screen w-screen overflow-hidden bg-slate-400">
        <div className="absolute right-[15%]">
          Current selected router is: {clickedRouter?.id ?? "None"}
        </div>
        <div id="board" className="w-screen opacity-1">
          <svg
            id="lines"
            className="absolute w-screen h-screen pointer-events-none"
          >
            {lines.map(([line1, line2], index) => (
              <line
                key={index}
                x1={line1.x + LINE_OFFSET}
                y1={line1.y + LINE_OFFSET}
                x2={line2.x + LINE_OFFSET}
                y2={line2.y + LINE_OFFSET}
                strokeWidth={1}
                stroke={"black"}
              />
            ))}
          </svg>
          {routers.map((router, index) => (
            <Router
              size={ROUTER_SIZE}
              key={index}
              id={router.id}
              x={router.x}
              y={router.y}
              start={start}
              onStop={drop}
              onDrag={drag}
            />
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
