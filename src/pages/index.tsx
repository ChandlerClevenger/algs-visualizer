import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { DraggableData } from "react-draggable";
import DynamicRouter from "../componets/dynamicRouter";
import StaticRouter from "../componets/staticRouter";

interface Point {
  x: number;
  y: number;
}
interface Router {
  id: number;
  x: number;
  y: number;
}

const Home: NextPage = () => {
  const ROUTER_SIZE = 75;
  const [routers, setRouters] = useState<Router[]>([]);
  const [pos, setPos] = useState<Point>({ x: 0, y: 0 });

  function drop(e: React.MouseEvent, info: DraggableData) {
    let coords: any = normalizeDrop(e);
    if (!coords) return;

    setRouters((oldRouters) => [
      ...oldRouters,
      { x: coords.x, y: coords.y, id: routers.length },
    ]);
  }

  function normalizeDrop(e: any): Point | null {
    let mouseX = e.clientX;
    let mouseY = e.clientY;
    const deviceBarRect = document
      .querySelector("#device-bar")
      ?.getClientRects()[0];
    const boardRect = document.querySelector("#board")?.getClientRects()[0];
    const routerRect = e.target?.getClientRects()[0];

    // Check bounds
    if (
      !deviceBarRect ||
      !boardRect ||
      deviceBarRect.right > mouseX ||
      mouseX > boardRect.right ||
      mouseX < boardRect.left ||
      mouseY < boardRect.top ||
      mouseY > boardRect.bottom
    ) {
      return null;
    }
    // Correct bounds
    const BUFFER = ROUTER_SIZE / 2;
    if (routerRect.bottom + BUFFER > deviceBarRect.bottom) {
      mouseY = deviceBarRect.bottom - BUFFER;
    }
    if (routerRect.top - BUFFER < deviceBarRect.top) {
      mouseY = deviceBarRect.top + BUFFER;
    }
    if (routerRect.left - BUFFER < deviceBarRect.right) {
      mouseX = deviceBarRect.right + BUFFER;
    }
    if (routerRect.right + BUFFER > boardRect.right) {
      mouseX = boardRect.right - BUFFER;
    }
    return { x: mouseX, y: mouseY };
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex h-screen w-screen overflow-hidden">
        <div
          id="device-bar"
          className="absolute p-4 fit h-screen bg-slate-800 text-center rounded-r-md	"
        >
          <span className=" text-white font-bold">Router</span>
          <StaticRouter onStop={drop} position={pos} size={ROUTER_SIZE} />;
        </div>
        <div id="board" className="w-screen bg-slate-400">
          {routers.map((router, index) => (
            <DynamicRouter
              key={index}
              x={router.x}
              y={router.y}
              size={ROUTER_SIZE}
            />
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
