import { copyFileSync } from "fs";
import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { DraggableData } from "react-draggable";
import Router from "../componets/router";

const ROUTER_SIZE = 75;
interface RouterInt {
  onStop: any;
  start: any;
  id: number;
  x: number;
  y: number;
}

const Home: NextPage = () => {
  const defaultRouter: RouterInt = {
    onStop: drop,
    start: start,
    id: 0,
    x: 0,
    y: 0,
  };
  const [routers, setRouters] = useState<RouterInt[]>([defaultRouter]);
  const [currentPos, setCurrentPos] = useState({ top: 0, left: 0 });
  const [lines, setLines] = useState<React.SVGProps<SVGLineElement>[]>([]);
  const [clickedRouter, setClickedRouter] = useState<RouterInt>();

  function start(e: React.MouseEvent) {
    const { top, left } = e.target.getBoundingClientRect();
    setCurrentPos({ top, left });
  }

  function drop(e: React.MouseEvent, info: DraggableData) {
    const { top, left } = e.target.getBoundingClientRect();
    // Must move at least 100 px out
    if (info.x < 100 && info.y < 100) return;

    // Detect click
    if (currentPos.left == left && currentPos.top == top) {
      handleClick(e, info);
      return;
    }

    const DRAGGED_ID = Number(info.node.id);
    for (let router of routers) {
      if (router.id == DRAGGED_ID) {
        // update position of old
        router.x = info.x;
        router.y = info.y;
      }
    }

    if (DRAGGED_ID == routers.length - 1) {
      setRouters((oldRouters) => [
        ...oldRouters,
        { onStop: drop, id: routers.length, x: 0, y: 0 },
      ]);
    }
    console.log(routers);
  }

  function handleClick(e: React.MouseEvent, info: DraggableData) {
    console.log("clicked");
    if (clickedRouter) {
      const diff = ROUTER_SIZE / 2;
      let x1 = clickedRouter.x + diff;
      let x2 = info.x + diff;
      let y1 = clickedRouter.y + diff;
      let y2 = info.y + diff;
      setLines((oldLines) => [
        ...oldLines,
        { x1: clickedRouter.x, x2: info.x, y1: clickedRouter.y, y2: info.y },
      ]);
      setClickedRouter(null);
      console.log("Resetting clicked");
      return;
    }
    console.log("Setting first clicked");
    setClickedRouter({ onstop: drop, id: e.target.id, x: info.x, y: info.y });
    console.log(clickedRouter);
  }

  return (
    <>
      <Head>
        <title>Ball State - CS Team</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <script src="./script/logmouse.js"></script>
      </Head>

      <main className="flex h-screen w-screen overflow-hidden bg-slate-400">
        <div id="board" className="w-screen opacity-1">
          <svg
            id="lines"
            className="absolute w-screen h-screen pointer-events-none"
          >
            {lines.map((line, index) => (
              <line
                x1={line.x1}
                y1={line.y1}
                x2={line.x2}
                y2={line.y2}
                strokeWidth={1}
                stroke={"black"}
              />
            ))}
          </svg>
          {routers.map((router, index) => (
            <Router
              size={ROUTER_SIZE}
              key={index}
              id={router.id}
              x={router.x}
              y={router.y}
              start={start}
              onStop={drop}
            />
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
